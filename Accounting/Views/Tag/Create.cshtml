@model Accounting.Models.TagViewModels.CreateTagViewModel

@{
    ViewData["Title"] = "Create Tag - " + ConfigurationSingleton.Instance.ApplicationName;
}

<script src="https://unpkg.com/vue@next"></script> @*Vue Version v3.3.4*@

@{
  string headerText = "Create Tag";
}
<partial name="_H1HeaderPartial" model="@headerText" />

<form id="app" asp-action="Create" asp-controller="Tag" method="post" class="display-flex flex-direction-column">
    <div class="display-flex flex-direction-column">
        <label asp-for="Name"></label>
        <input asp-for="Name" class="margin-bottom-5px font-size-20px" />
    </div>
    <div class="display-flex flex-direction-column">
        <label asp-for="Action"></label>
        <input asp-for="Action" class="margin-bottom-5px font-size-20px" />
    </div>
    <div class="display-flex flex-direction-column">
        <label asp-for="Metadata"></label>
        <textarea asp-for="Metadata" class="margin-bottom-5px font-size-20px"></textarea>
    </div>
    <div class="display-flex flex-direction-column">
        <label asp-for="StatusChangeSequenceIds" class="margin-bottom-5px">Status Change Sequence (higher is older)</label>
        <input asp-for="StatusChangeSequenceIds" type="hidden" />
        <div class="display-flex flex-wrap-wrap margin-bottom-5px">
            <status-sequence v-for="(status, index) in statusSequence"
                             :status="status"
                             :key="status.id"
                             :sequence-number="index"
                             @@status-removed="handleStatusRemoved">
            </status-sequence>

        </div>
    </div>

    <div class="display-flex margin-bottom-5px">
        <status-available v-for="status in availableStatuses"
                          :status="status"
                          :key="status.id"
                          @@status-clicked="handleStatusClicked">
        </status-available>
    </div>

    <div class="display-flex flex-direction-column margin-bottom-5px">
        <label>Match Type</label>
        @foreach (var matchType in Model.MatchTypes)
        {
            <div>
                <input asp-for="SelectedMatchType" type="radio" value="@matchType" /> @matchType
            </div>
        }
    </div>
    <button type="submit" class="full-width-regular-button">Create Tag</button>
</form>

@if (Model != null && Model.ValidationResult != null)
{
    foreach (var error in Model.ValidationResult.Errors)
    {
        <div>
            <small class="color-red">@error.ErrorMessage</small>
        </div>
    }
}

<template id="status-sequence">
    <div>
        <a href="#" v-on:click="handleStatusClick" class="text-decoration-none margin-right-10px background-color-dodgerblue padding-2px color-white border-radius-5px ">
            {{ sequenceNumber + 1 }}. {{ status.Name }}
        </a>
    </div>
</template>

<template id="status-available">
    <div>
        <a href="#" v-on:click="handleStatusClick" class="text-decoration-none margin-right-10px background-color-dodgerblue padding-2px color-white border-radius-5px ">
            {{ status.Name }}
        </a>
    </div>
</template>

<script>
    (function () {
        const statuses = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Statuses));
        const selectedStatuses = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Statuses)) || [];

        const { createApp, ref } = Vue;

        const StatusAvailable = {
            template: '#status-available',
            props: ['status'],
            emits: ['status-clicked'],
            methods: {
                handleStatusClick(event) {
                    event.preventDefault();
                    console.log("You clicked on available status: " + this.status.ID);
                    this.$emit('status-clicked', this.status);
                }
            }
        }

        const StatusSequence = {
            template: '#status-sequence',
            props: ['status', 'sequenceNumber'],
            emits: ['status-removed'],
            methods: {
                handleStatusClick(event) {
                    event.preventDefault();
                    console.log("You clicked on sequence status: " + this.status.ID);
                    this.$emit('status-removed', this.status);
                }
            }
        }

        const app = createApp({
            components: {
                'status-available': StatusAvailable,
                'status-sequence': StatusSequence
            },
            data() {
                return {
                    availableStatuses: statuses,
                    statusSequence: selectedStatuses
                };
            },
            methods: {
                handleStatusClicked(status) {
                    this.statusSequence.push(status);
                },
                handleStatusRemoved(status) {
                    const index = this.statusSequence.findIndex(s => s.ID === status.ID);
                    if (index !== -1) {
                        this.statusSequence.splice(index, 1);
                    }
                }
            },
            watch: {
                statusSequence: {
                    handler(newStatusSequence) {
                        let statusSequenceIds = newStatusSequence.map(status => status.ID).join(",");
                        document.querySelector('input[name="StatusChangeSequenceIds"]').value = statusSequenceIds;
                    },
                    deep: true
                }
            }
        });

        app.mount('#app');
    })();
</script>