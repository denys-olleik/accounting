@model Accounting.Models.InvoiceViewModels.CreateInvoiceViewModel

@{
	ViewData["Title"] = "Create invoice - " + ConfigurationSingleton.Instance.ApplicationName;
}

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

@{
	string headerText = "Create invoice";
}
<partial name="_H1HeaderPartial" model="@headerText" />

<template id="customer-selection-template">
	<div class="display-flex flex-direction-column margin-bottom-5px">
		<label for="customerSearch" class="background-color-antiquewhite">Customer search</label>
		<input id="customerSearch" ref="customerSearchInput" v-model="searchQuery" @@input="filterCustomers"
			@@keydown="handleKeyDown" @@keydown.left="onLeftArrowPress" class="font-size-20px margin-bottom-2px"
			:disabled="!!selectedCustomer" autofocus />
		<div v-if="filteredCustomers.length > 0 && !selectedCustomer"
			class="background-color-black color-white padding-5px max-height-250px overflow-auto margin-bottom-5px font-Roboto-Mono box-shadow">
			<div v-for="(customer, index) in filteredCustomers" :key="customer.id" @@click="selectCustomer(customer)"
				class="font-size-16px">
				<span v-if="index === selectedIndex" class="blinking-cursor margin-right-10px">█</span>
				<business-entity-name-display :business-entity="customer"></business-entity-name-display>
			</div>
		</div>
		<div v-if="selectedCustomer" class="display-flex text-align-center">
			<a href="#" class="width-100 color-white border-1px-solid-white background-color-cornflowerblue"
				@@click.prevent="clearSelection">clear</a>
		</div>
	</div>
</template>

<template id="invoice-line-removal-template">
	<div class="background-color-red text-align-center">
		<div v-if="!isRemoveConfirmationVisible">
			<a href="#" class="color-white text-decoration-none width-100 display-block"
				@@click.prevent="toggleConfirmationVisibility">remove</a>
		</div>
		<div v-else>
			<div class="margin-bottom-5px">
				<a href="#" class="color-white text-decoration-none" @@click.prevent="confirmRemoval">remove</a>
			</div>
			<div>
				<a href="#" class="color-white text-decoration-none"
					@@click.prevent="toggleConfirmationVisibility">cancel</a>
			</div>
		</div>
	</div>
</template>

<template id="invoice-line-template">
	<div class="display-flex flex-direction-column margin-bottom-5px background-color-antiquewhite">
		<div class="display-flex max-width-768-flex-direction-column">
			<div class="display-flex flex-2 flex-direction-column">
				<label>Title</label>
				<input type="text" ref="titleInput" class="font-size-20px font-Roboto-Mono width-100"
					v-model="invoiceLine.title" @@click="handleTitleClick" @@blur="handleTitleBlur" />
			</div>
			<div class="width-5px"></div>
			<div class="display-flex flex-2 flex-direction-column">
				<label>Quantity</label>
				<input type="number" ref="quantityInput" class="font-size-20px font-Roboto-Mono width-100"
					v-model="invoiceLine.quantity" />
			</div>
			<div class="width-5px"></div>
			<div class="display-flex flex-2 flex-direction-column">
				<label>Price</label>
				<input type="number" step="0.01" class="font-size-20px font-Roboto-Mono width-100"
					v-model="invoiceLine.price" @@keydown="focusSearchAfterPriceEnter" />
			</div>
			<div class="width-5px"></div>
			<div class="display-flex flex-1 flex-direction-column text-align-right">
				<label>Total</label>
				<div class="font-size-20px font-Roboto-Mono width-100 background-color-lightgray">{{ lineTotal }}</div>
			</div>
		</div>
		<div class="display-flex">
			<div class="display-flex flex-1 flex-direction-column">
				<label>Description</label>
				<textarea v-model="invoiceLine.description" class="font-size-20px font-Roboto-Mono width-100"></textarea>
			</div>
		</div>
		<div class="display-flex">
			<div class="flex-1"></div>
			<invoice-line-removal :invoice-line="invoiceLine" @@confirm-removal="$emit('confirm-removal', invoiceLine)"
				@@cancel-removal="$emit('cancel-removal', invoiceLine)">
			</invoice-line-removal>
		</div>
	</div>
</template>

<template id="total-template">
	<div class="display-flex">
		<div class="flex-1 background-color-antiquewhite">
			<table class="width-100 border-collapse">
				<tbody>
					<tr>
						<td class="font-size-20px">Total</td>
						<td class="text-align-right font-size-20px">{{ total }}</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</template>

<template id="payment-term-selector-template">
	<div class="display-flex flex-direction-column">
		<select class="font-size-20px" v-model="selectedPaymentTermId" name="SelectedPaymentTermId">
			<option value="">Select payment term</option>
			<option v-for="paymentTerm in paymentTerms" :value="paymentTerm.id" :key="paymentTerm.id">
				{{ paymentTerm.displayText }}
			</option>
		</select>
	</div>
</template>

<template id="invoice-detail-template">
	<table class="border-bottom-1px-solid-1a3b56">
		<tbody>
			<tr>
				<td class="text-align-right white-space-nowrap width-1px">
					Invoice date
				</td>
				<td class="text-align-right">
					{{ formatDate(invoiceDate) }}
				</td>
			</tr>
			<tr>
				<td class="text-align-left white-space-nowrap">Due date</td>
				<td class="text-align-right">{{ formatDate(dueDate) }}</td>
			</tr>
		</tbody>
	</table>
</template>

<template id="customer-detail-template">
	<table class="border-bottom-1px-solid-1a3b56">
		<tbody>
			<tr>
				<td class="text-align-left">
					<business-entity-name-display :business-entity="customer"></business-entity-name-display>
				</td>
			</tr>
			<tr>
				<td class="text-align-left">{{ customer.website }}</td>
			</tr>
		</tbody>
	</table>
</template>

<template id="addresses-and-selected-address-template">
	<div v-if="selectedAddress" class="margin-bottom-5px">
		<div class="border-bottom-1px-solid-1a3b56">
			{{ addressType === 'billing' ? 'Selected billing address' : 'Selected shipping address' }}
		</div>
		<div class="display-flex">
			<div class="font-Roboto-Mono">
				<div>{{ selectedAddress.extraAboveAddress }}</div>
				<div>{{ selectedAddress.addressLine1 }}</div>
				<div>{{ selectedAddress.addressLine2 }}</div>
				<div>{{ selectedAddress.extraBelowAddress }}</div>
				<div>{{ selectedAddress.city }}, {{ selectedAddress.stateProvince }} {{ selectedAddress.postalCode }}</div>
				<div>{{ selectedAddress.country }}</div>
			</div>
		</div>

	</div>
	<div v-show="dropdownVisible">
		<div v-for="address in addresses" :key="address.id" class="display-flex margin-bottom-5px margin-2px margin-2px">
			<a href="" @@click.prevent="selectAddress(address)" class="display-flex flex-1 text-decoration-none">
				<div
					class="flex-1 border-left-5px-solid-dodgerblue border-top-bottom-2px-solid-dodgerblue font-Roboto-Mono">
					<div>{{ address.extraAboveAddress }}</div>
					<div>{{ address.addressLine1 }}</div>
					<div>{{ address.addressLine2 }}</div>
					<div>{{ address.extraBelowAddress }}</div>
					<div>{{ address.city }}, {{ address.stateProvince }} {{ address.postalCode }}</div>
					<div>{{ address.country }}</div>
				</div>
				<div class="writing-mode-vertical-lr text-align-center color-white background-color-dodgerblue">
					select
				</div>
			</a>
		</div>
	</div>
	<a href="#" v-if="selectedCustomer" class="" @@click.prevent="dropdownVisible = !dropdownVisible">
		<span v-if="dropdownVisible">Close addresses</span>
		<span v-else>{{ addressType === 'billing' ? 'Open billing addresses' : 'Open shipping addresses' }}</span>
	</a>
</template>

<template id="attachment-action-template">
	<div class="display-flex padding-top-bottom-2px">
		<div class="display-flex flex-1">
			<a href="#" @@click.prevent="toggleAction" class="margin-right-5px">{{ attachment.fileName }}</a>
			<span v-if="isExpanded" class="display-flex margin-left-2px">
				<div class="display-flex flex-direction-column background-color-333333 padding-left-5px padding-right-5px">
					<div class="flex-1"></div>
					<a class="font-size-12px font-Roboto color-white text-decoration-none cursor-default">options:</a>
					<div class="flex-1"></div>
				</div>
				<div
					class="display-flex flex-direction-column background-color-333333 padding-right-5px padding-left-5px margin-left-2px">
					<div class="flex-1"></div>
					<a href="#" @@click.prevent="$emit('remove', attachment.invoiceAttachmentID)"
						class="font-size-16px font-Roboto color-white text-decoration-none">remove</a>
					<div class="flex-1"></div>
				</div>
		</div>
	</div>
</template>

<form id="app" asp-action="Create" asp-controller="Invoice" method="post"
	class="display-flex flex-direction-column margin-bottom-5px" autocomplete="off">

	<input type="hidden" name="InvoiceLinesJson" :value="JSON.stringify(invoiceLines)" />
	<input type="hidden" name="SelectedPaymentTermJSON" :value="JSON.stringify(selectedPaymentTerm)" />
	<input type="hidden" name="InvoiceDate" value="@Model.InvoiceDate!.Value.ToString("o")" />
	<input type="hidden" name="DueDate" :value="dueDate" />
	<input type="hidden" name="SelectedBillingAddressId" :value="selectedBillingAddress?.id" />
	<input type="hidden" name="SelectedShippingAddressId" :value="selectedShippingAddress?.id" />
	<input type="hidden" name="SelectedCustomerId" :value="selectedCustomer?.id" />
	<input type="hidden" name="InvoiceAttachmentsJSON" :value="JSON.stringify(attachments)" />

	<customer-selection :customers="customers" :selected-customer="selectedCustomer"
		@@update:selected-customer="updateSelectedCustomer"></customer-selection>

	<div class="display-flex margin-bottom-5px max-width-768-flex-direction-column">
		<div class="display-flex flex-1 flex-direction-column background-color-antiquewhite">
			<customer-detail :customer="selectedCustomer" v-if="selectedCustomer"></customer-detail>
		</div>
		<div class="width-5px"></div>
		<div class="display-flex flex-1 flex-direction-column background-color-antiquewhite">
			<invoice-detail :invoice-date="invoiceDate" :selected-payment-term="selectedPaymentTerm">
			</invoice-detail>
		</div>
	</div>

	<div class="display-flex margin-bottom-5px max-width-768-flex-direction-column">
		<div
			class="display-flex flex-direction-column flex-1 max-width-768-margin-bottom-5px background-color-antiquewhite">
			<addresses-and-selected-address :selected-address="selectedBillingAddress"
				@@update:selected-address="handleSelectedAddress($event, 'billing')"
				:addresses="selectedCustomer ? selectedCustomer.addresses : []" :selected-customer="selectedCustomer"
				address-type="billing">
			</addresses-and-selected-address>
		</div>
		<div class="width-5px"></div>
		<div class="display-flex flex-direction-column flex-1 background-color-antiquewhite">
			<addresses-and-selected-address :selected-address="selectedShippingAddress"
				@@update:selected-address="handleSelectedAddress($event, 'shipping')"
				:addresses="selectedCustomer ? selectedCustomer.addresses : []" :selected-customer="selectedCustomer"
				address-type="shipping">
			</addresses-and-selected-address>
		</div>
	</div>

	<products-and-services-search ref="productsAndServicesSearch" :products-or-services="productsOrServices"
		:selected-customer="selectedCustomer" @@product-or-service-selected="handleProductOrServiceSelected">
	</products-and-services-search>

	<invoice-line v-for="invoiceLine in invoiceLines" :key="invoiceLine.id" :invoice-line="invoiceLine"
		@@confirm-removal="handleConfirmRemoval" @@focus-search-input="focusSearchInput">
	</invoice-line>

	<div class="background-color-antiquewhite margin-bottom-5px">
		<label>Payment terms</label>
		<payment-term-selector :payment-terms="paymentTerms" v-model:selected-payment-term="selectedPaymentTerm">
		</payment-term-selector>
	</div>

	<div class="display-flex margin-bottom-5px">
		<div class="flex-1"></div>
		<div class="width-5px">
		</div>
		<div class="flex-1">
			<total :invoice-lines="invoiceLines"></total>
		</div>
	</div>

	<div class="display-flex margin-bottom-5px">
		<div class="flex-1 padding-5px background-color-antiquewhite">
			<input type="file" @@change="uploadFile" ref="fileInput" />
		</div>
	</div>

	<table class="border-collapse width-100 margin-bottom-5px background-color-antiquewhite">
		<thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
			<tr>
				<th class="text-align-left width-1px padding-right-20px">File name</th>
			</tr>
		</thead>
		<tbody class="font-Roboto-Mono">
			<tr v-for="attachment in attachments" :key="attachment.invoiceAttachmentID">
				<td class="padding-right-20px white-space-nowrap">
					<attachment-action :attachment='attachment'
						:is-expanded="attachment.invoiceAttachmentID === expandedAttachmentId"
						@@expand="handleAttachmentExpand(attachment.invoiceAttachmentID)"
						@@remove="removeAttachment"></attachment-action>
				</td>
			</tr>
		</tbody>
	</table>

	<div class="display-flex margin-bottom-5px">
		<div class="flex-1">
			<div class="display-flex flex-direction-column">
				<label class="background-color-antiquewhite">Payment instructions</label>
				<div class="display-flex flex-direction-column">
					<textarea asp-for="PaymentInstructions" class="font-size-20px width-100" rows="5"></textarea>
				</div>
				<div class="display-flex background-color-antiquewhite">
					<input type="checkbox" asp-for="RememberPaymentInstructions">
					<label asp-for="RememberPaymentInstructions">Remember</label>
				</div>
			</div>
		</div>
	</div>

	<div class="display-flex">
		<div class="flex-1">
			<button class="full-width-regular-button width-100" type="button"
				onclick="event.preventDefault(); window.location.href='@Url.Action("Invoices", "Invoice")';">Cancel</button>
		</div>
		<div class="width-5px"></div>
		<div class="flex-1">
			<button type="submit" class="full-width-regular-button width-100">Create invoice</button>
		</div>
	</div>
</form>

@if (Model != null && Model.ValidationResult != null)
{
	foreach (var error in Model.ValidationResult.Errors)
	{
		<div>
			<small class="color-red">@error.ErrorMessage</small>
		</div>
	}
	<div class="margin-bottom-5px">
	</div>
}

<script src="~/js/ProductsAndServicesSearch.js" asp-append-version="true"></script>
<script src="~/js/BusinessEntityNameDisplay.js" asp-append-version="true"></script>

<script>
	const { createApp } = Vue;

	const Total = {
		name: 'Total',
		template: '#total-template',
		props: ['invoiceLines'],
		computed: {
			total() {
				let total = 0;
				for (let line of this.invoiceLines) {
					let lineTotal = line.quantity * line.price;
					total += lineTotal;
				}
				return total;
			}
		}
	};

	const InvoiceLineRemoval = {
		name: 'InvoiceLineRemoval',
		template: '#invoice-line-removal-template',
		props: ['invoiceLine'],
		data() {
			return {
				isRemoveConfirmationVisible: false
			}
		},
		methods: {
			toggleConfirmationVisibility() {
				this.isRemoveConfirmationVisible = !this.isRemoveConfirmationVisible;
			},
			confirmRemoval() {
				this.$emit('confirm-removal', this.invoiceLine);
			},
		}
	};

	const InvoiceLine = {
		name: 'InvoiceLine',
		template: '#invoice-line-template',
		components: {
			'invoice-line-removal': InvoiceLineRemoval
		},
		props: ['invoiceLine'],
		mounted() {
			this.$nextTick(() => {
				this.$refs.quantityInput.focus();
				this.$refs.quantityInput.select();
			});
		},
		methods: {
			confirmRemoval() {
				this.$emit('remove-invoice-line', this.invoiceLine);
			},
			handleTitleClick() {
				const rect = this.$refs.titleInput.getBoundingClientRect();
				this.$emit('title-click', {
					invoiceLine: this.invoiceLine,
					position: {
						top: rect.bottom,
						left: rect.left
					}
				});
			},
			handleTitleBlur() {
				this.$emit('title-blur');
			},
			focusSearchAfterPriceEnter(event) {
				if (event.key === 'Enter') {
					event.preventDefault();
					this.$emit('focus-search-input');
				}
			},
		},
		computed: {
			lineTotal() {
				return this.invoiceLine.quantity * this.invoiceLine.price;
			}
		}
	};

	const CustomerSelection = {
		name: 'CustomerSelection',
		template: '#customer-selection-template',
		components: {
			'business-entity-name-display': BusinessEntityNameDisplay
		},
		props: ['customers', 'selectedCustomer'],
		data() {
			return {
				searchQuery: '',
				filteredCustomers: [],
				selectedIndex: -1,
			};
		},
		watch: {
			selectedCustomer: {
				immediate: true,
				handler: 'updateSearchQuery'
			},
		},
		mounted() {
			document.addEventListener('click', this.clickOutside);
		},
		beforeDestroy() {
			document.removeEventListener('click', this.clickOutside);
		},
		methods: {
			clickOutside(event) {
				if (!this.$el.contains(event.target)) {
					this.filteredCustomers = [];
					this.selectedIndex = -1;
				}
			},
			filterCustomers() {
				if (this.selectedCustomer) return; // Don't filter if a customer is selected

				if (this.searchQuery.trim() === '') {
					this.filteredCustomers = [];
					this.selectedIndex = -1;
					return;
				}
				this.filteredCustomers = this.customers.filter(customer => {
					const combinedString = [
						customer.firstName ?? '',
						customer.lastName ?? '',
						customer.companyName ?? ''
					].join(' ').toLowerCase();

					return combinedString.includes(this.searchQuery.toLowerCase());
				});
				this.selectedIndex = this.filteredCustomers.length > 0 ? 0 : -1;
			},
			selectCustomer(customer) {
				this.$emit('update:selected-customer', customer);
				this.filteredCustomers = [];
				this.selectedIndex = -1;
				this.updateSearchQuery();
			},
			handleKeyDown(event) {
				if (this.selectedCustomer) return; // Don't handle key events if a customer is selected

				if (this.filteredCustomers.length === 0) return;

				if (event.key === 'ArrowDown') {
					this.selectedIndex = (this.selectedIndex + 1) % this.filteredCustomers.length;
					event.preventDefault();
				} else if (event.key === 'ArrowUp') {
					this.selectedIndex = (this.selectedIndex - 1 + this.filteredCustomers.length) % this.filteredCustomers.length;
					event.preventDefault();
				} else if (event.key === 'Enter') {
					event.preventDefault();
					if (this.selectedIndex !== -1) {
						this.selectCustomer(this.filteredCustomers[this.selectedIndex]);
					}
				} else if (event.key === 'Escape') {
					this.filteredCustomers = [];
					this.selectedIndex = -1;
				}
			},
			onLeftArrowPress() {
				if (this.searchQuery.trim() === '') {
					window.history.back();
				}
			},
			clearSelection() {
				this.$emit('update:selected-customer', null);
				this.searchQuery = '';
				this.filteredCustomers = [];
				this.selectedIndex = -1;
				this.$nextTick(() => {
					this.$refs.customerSearchInput.focus();
				});
			},
			updateSearchQuery() {
				if (this.selectedCustomer) {
					this.searchQuery = [this.selectedCustomer.firstName, this.selectedCustomer.lastName, this.selectedCustomer.companyName]
						.filter(value => value !== null && value !== undefined)
						.join(' ');
				} else {
					this.searchQuery = '';
				}
			},
		},
	};

	const PaymentTermSelector = {
		name: 'PaymentTermSelector',
		template: '#payment-term-selector-template',
		props: ['paymentTerms', 'selectedPaymentTerm'],
		computed: {
			selectedPaymentTermId: {
				get() {
					return this.selectedPaymentTerm && this.selectedPaymentTerm.id ? this.selectedPaymentTerm.id : '';
				},
				set(newValue) {
					let selected = this.paymentTerms.find(paymentTerm => paymentTerm.id === newValue);
					if (selected) {
						this.$emit('update:selectedPaymentTerm', selected);
					} else {
						this.$emit('update:selectedPaymentTerm', null);
					}
				}
			}
		}
	};

	const InvoiceDetail = {
		name: 'InvoiceDetail',
		template: '#invoice-detail-template',
		props: ['invoiceDate', 'selectedPaymentTerm'],
		computed: {
			dueDate() {
				if (!this.selectedPaymentTerm) {
					return null;
				}
				let dueDate = new Date(this.invoiceDate);
				dueDate.setDate(dueDate.getDate() + this.selectedPaymentTerm.daysUntilDue);
				return dueDate;
			}
		},
		methods: {
			formatDate(date) {
				if (!date) {
					return '';
				}
				let d = new Date(date),
					localDate = new Date(d.getTime() - d.getTimezoneOffset() * 60000),
					month = '' + (localDate.getMonth() + 1),
					day = '' + localDate.getDate(),
					year = localDate.getFullYear();

				if (month.length < 2)
					month = '0' + month;
				if (day.length < 2)
					day = '0' + day;

				return [month, day, year].join('/');
			}
		}
	};

	const AddressesAndSelectedAddress = {
		name: 'AddressesAndSelectedAddress',
		template: '#addresses-and-selected-address-template',
		props: ['addresses', 'selectedAddress', 'selectedCustomer', 'addressType'],
		data: function () {
			return {
				dropdownVisible: false
			};
		},
		watch: {
			addresses: {
				handler() {
					this.dropdownVisible = false;
				},
				deep: true
			}
		},
		methods: {
			selectAddress(address) {
				this.dropdownVisible = false;
				this.$emit('update:selected-address', { address, type: this.addressType });
			},
		},
	};

	const AttachmentAction = {
		name: 'AttachmentAction',
		props: ['attachment', 'isExpanded'],
		template: '#attachment-action-template',
		methods: {
			toggleAction() {
				this.$emit('expand');
			},
			removeAttachment() {
				this.$emit('remove', this.attachment.invoiceAttachmentID);
			}
		}
	};

	const CustomerDetail = {
		name: 'CustomerDetail',
		props: ['customer'],
		template: '#customer-detail-template',
		components: {
			'business-entity-name-display': BusinessEntityNameDisplay
		}
	};

	const app = createApp({
		components: {
			'invoice-detail': InvoiceDetail,
			'payment-term-selector': PaymentTermSelector,
			'invoice-line': InvoiceLine,
			'invoice-line-removal': InvoiceLineRemoval,
			'total': Total,
			'customer-selection': CustomerSelection,
			'addresses-and-selected-address': AddressesAndSelectedAddress,
			'products-and-services-search': ProductsAndServicesSearch,
			'business-entity-name-display': BusinessEntityNameDisplay,
			'attachment-action': AttachmentAction,
			'customer-detail': CustomerDetail
		},
		data() {
			return {
				customers: @Html.Raw(Json.Serialize(Model!.Customers).ToString() ?? "[]"),
				selectedCustomer: @Html.Raw(Json.Serialize(Model.SelectedCustomer).ToString() ?? "null"),
				selectedBillingAddress: @Html.Raw(Json.Serialize(Model.SelectedBillingAddress).ToString() ?? "null"),
				selectedShippingAddress: @Html.Raw(Json.Serialize(Model.SelectedShippingAddress).ToString() ?? "null"),
				invoiceLines: @Html.Raw(Model.InvoiceLinesJson ?? "[]"),
				paymentTerms: @Html.Raw(Json.Serialize(Model.PaymentTerms).ToString() ?? "[]"),
				selectedPaymentTerm: '',
				invoiceDate: @Html.Raw(Json.Serialize(Model.InvoiceDate).ToString() ?? "null"),
				dueDate: @Html.Raw(Json.Serialize(Model.DueDate).ToString() ?? "null"),
				productsOrServices: @Html.Raw(Json.Serialize(Model.ProductsAndServices).ToString() ?? "[]"),
				attachments: @Html.Raw(Model?.InvoiceAttachments != null ? Json.Serialize(Model.InvoiceAttachments) : "[]"),
				expandedAttachmentId: null,
				searchQuery: '',
				isSearchActive: false,
			};
		},
		watch: {
			selectedCustomer(newCustomer) {
				if (newCustomer) {
					this.selectedBillingAddress = newCustomer.addresses[0] || null;
					this.selectedShippingAddress = newCustomer.addresses[0] || null;
				} else {
					// Clear addresses when customer is cleared
					this.selectedBillingAddress = null;
					this.selectedShippingAddress = null;
				}
			},
			invoiceDate: 'calculateDueDate',
			selectedPaymentTerm: 'calculateDueDate',
		},
		methods: {
			removeAttachment(id) {
				this.attachments = this.attachments.filter(attachment => attachment.invoiceAttachmentID !== id);
			},
			handleAttachmentExpand(id) {
				this.expandedAttachmentId = this.expandedAttachmentId === id ? null : id;
			},
			focusSearchInput() {
				this.$refs.productsAndServicesSearch.focusInput();
			},
			handleSelectedAddress(eventData, type) {
				if (type === 'billing') {
					this.selectedBillingAddress = eventData.address;
				} else if (type === 'shipping') {
					this.selectedShippingAddress = eventData.address;
				}
			},
			uploadFile(event) {
				const file = event.target.files[0];
				const formData = new FormData();
				formData.append('formFile', file);

				fetch('/api/invoice-attachment/upload', {
					method: 'POST',
					body: formData,
				})
					.then(response => {
						if (response.ok) {
							return response.json();
						}
						throw new Error('Network response was not ok.');
					})
					.then(data => {
						this.attachments.push(data);
						this.$refs.fileInput.value = '';
					})
					.catch(error => {
						console.log('There was a problem with the fetch operation: ', error);
					});
			},
			updateSelectedCustomer(newCustomer) {
				this.selectedCustomer = newCustomer;
				if (!newCustomer) {
					// Clear addresses when customer is cleared
					this.selectedBillingAddress = null;
					this.selectedShippingAddress = null;
				}
			},
			removeInvoiceLine(invoiceLine) {
				const index = this.invoiceLines.indexOf(invoiceLine);
				if (index !== -1) {
					this.invoiceLines.splice(index, 1);
				}
			},
			handleConfirmRemoval(invoiceLine) {
				this.removeInvoiceLine(invoiceLine);
			},
			handleProductOrServiceSelected(productOrService) {
				this.invoiceLines.push({
					id: -1 * Math.floor(Math.random() * 2147483648),
					title: productOrService.name,
					description: productOrService.description,
					price: productOrService.sellFor,
					quantity: productOrService.quantity,
					revenueAccountId: productOrService.revenueAccountId,
					assetsAccountId: productOrService.assetsAccountId,
				});
			},
			calculateDueDate() {
				if (!this.invoiceDate || !this.selectedPaymentTerm) {
					this.dueDate = null;
					return;
				}
				let dueDate = new Date(this.invoiceDate);
				dueDate.setDate(dueDate.getDate() + this.selectedPaymentTerm.daysUntilDue);
				this.dueDate = dueDate.toISOString();
			},
		},
		mounted() {
			this.calculateDueDate();
		}
	});

	app.mount('#app');
</script>