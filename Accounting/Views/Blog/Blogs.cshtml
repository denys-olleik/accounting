@model Accounting.Models.BlogViewModels.BlogsPaginatedViewModel

@{
  ViewData["Title"] = "Blogs - " + ConfigurationSingleton.Instance.ApplicationName;
}

@{
  string headerText = "Blogs";
}
<partial name="_H1HeaderPartial" model="@headerText" />

<script src="~/js/vue-3-5-13.js" asp-append-version="true"></script>

<template id="blog-action-template">
  <div class="display-flex padding-top-bottom-2px">
    <div class="display-flex flex-1">
      <a href="#" @@click.prevent="toggleAction" class="margin-right-5px">{{ blog.title }}</a>
      <span v-if="isExpanded" class="display-flex margin-left-2px">
        <div class="display-flex flex-direction-column background-color-333333 padding-left-5px padding-right-5px">
          <div class="flex-1"></div>
          <a class="font-size-12px font-Roboto color-white text-decoration-none cursor-default">options:</a>
          <div class="flex-1"></div>
        </div>
        <div class="display-flex
          flex-direction-column
          background-color-333333
          padding-right-5px
          padding-left-5px
          margin-left-2px">
          <div class="flex-1"></div>
          <a href="#" class="font-size-16px font-Roboto color-white text-decoration-none">Option 1</a>
          <div class="flex-1"></div>
        </div>
        <div class="display-flex
          flex-direction-column
          background-color-333333
          padding-right-5px
          padding-left-5px
          margin-left-2px">
          <div class="flex-1"></div>
          <a href="#" class="font-size-16px font-Roboto color-white text-decoration-none">Option 2</a>
          <div class="flex-1"></div>
        </div>
        <div class="display-flex
          flex-direction-column
          background-color-333333
          padding-right-5px
          padding-left-5px
          margin-left-2px">
          <div class="flex-1"></div>
          <a href="#" class="font-size-16px font-Roboto color-white text-decoration-none">Option 3</a>
          <div class="flex-1"></div>
        </div>
      </span>
    </div>
  </div>
</template>

<div class="display-flex margin-bottom-5px background-color-antiquewhite">
	<div>
		<a asp-action="Create" asp-controller="Blog" class="font-Roboto font-size-16px color-blue margin-left-20px">
			Create blog
		</a>
	</div>
	<div class="margin-left-20px flex-1 text-align-right">
		<a asp-action="Index" asp-controller="Home" class="font-Roboto font-size-16px color-blue margin-left-20px">Home</a>
	</div>
</div>

<div id="app">
	<table class="border-collapse width-100 margin-bottom-5px background-color-antiquewhite">
		<thead class="border-bottom-1px-solid-1a3b56 font-Roboto">

		</thead>
		<tbody class="font-Roboto-Mono">

		</tbody>
	</table>

  <pagination-component :prev-page-url="`/b/blogs?page=${page - 1}&pageSize=${pageSize}`"
                        :next-page-url="nextPage ? `/b/blogs?page=${nextPage}&pageSize=${pageSize}` : ''" :is-filtered="isFiltered"
                        :page="page">
</div>

<script src="~/js/PaginationComponent.js" asp-append-version="true"></script>

<script>
  const { createApp } = Vue;

  const BlogAction = {
    name: 'BlogAction',
    props: ['blog', 'isExpanded'],
    template: '#blog-action-template',
    methods: {
      toggleAction() {
        this.$emit('expand');
      }
    }
  };

	const app = createApp({
    components: {
      'blog-action': BlogAction,
      'pagination-component': PaginationComponent
    },
    data() {
      return {
        blogs: [],
        expandedBlogId: null,
				blogsFilter: '',
        page: @Model.Page,
        pageSize: @Model.PageSize,
        nextPage: null,
        rememberPageSize: @(Model.RememberPageSize ? "true" : "false")
      };
    },
    computed: {
      isFiltered() {
        return !!this.blogsFilter;
      }
    },
    methods: {
      fetchBlogs() {
        const storedPageSize = parseInt(localStorage.getItem('pageSize'));
        if (storedPageSize) {
          this.pageSize = storedPageSize;
        }
        let apiUrl = this.isFiltered ?
          `/api/b/get-blogs-filtered` :
          `/api/b/get-blogs?page=${this.page}&pageSize=${this.pageSize}`;
        const queryParams = [];
        if (this.isFiltered) {
          if (this.blogsFilter) {
            queryParams.push(`blogTitles=${this.blogsFilter}`);
          }
        }
        if (queryParams.length > 0) {
          apiUrl += `?${queryParams.join('&')}`;
        }
        fetch(apiUrl)
          .then(response => response.json())
          .then(data => {
            this.blogs = data.blogs;
            if (data.page > 0) {
              this.page = data.page;
            }
            if (data.nextPage > 0) {
              this.nextPage = data.nextPage;
            } else {
              this.nextPage = null;
            }
          });
      },
      handleBlogExpand(id) {
        this.expandedBlogId = this.expandedBlogId === id ? null : id;
      },
    },
		mounted() {
			if (this.rememberPageSize) {
				localStorage.setItem('pageSize', this.pageSize);
			}
			this.fetchBlogs();
		},
	});

	app.mount('#app');
</script>