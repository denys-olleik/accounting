@model Accounting.Models.PaginatedViewModel

@{
  ViewData["Title"] = "Tenants - " + ConfigurationSingleton.Instance.ApplicationName;
}

@{
  string headerText = "Tenants";
}
<partial name="_H1HeaderPartial" model="@headerText" />

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

<div class="display-flex margin-bottom-5px background-color-antiquewhite">
  <div>
    <a asp-action="ProvisionTenant" asp-controller="DeploymentAndProvisioning" class="font-Roboto font-size-20px text-decoration-none color-darkslategray">Provision Tenant</a>
  </div>
</div>

<div id="app">
  <table class="border-collapse width-100 margin-bottom-5px background-color-antiquewhite">
    <thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
      <tr>
        <th></th>
        <th>
          <input type="text" v-model="fullyQualifiedDomainNameFilter" @@input="filterFullyQualifiedDomainName" placeholder="FullyQualifiedDomainName" class="font-size-16px width-100" />
        </th>
      </tr>
      <tr>
        <th>#</th>
        <th>Fully Qualified Domain Name</th>
        <th>Email</th>
        <th>Droplet Id</th>
        <th>IPV4</th>
        <th>SSHPublic</th>
        <th>SSHPrivate</th>
      </tr>
    </thead>
    <tbody>
      <template v-for="tenant in tenants" :key="tenant.id">"
        <tr>
          <td>{{ tenant.id }}</td>
          <td>{{ tenant.fullyQualifiedDomainName }}</td>
          <td>{{ tenant.email }}</td>
          <td>{{ tenant.dropletId }}</td>
          <td>{{ tenant.ipv4 }}</td>
          <td>{{ tenant.sshPublic }}</td>
          <td>{{ tenant.sshPrivate }}</td>
        </tr>
      </template>
    </tbody>
  </table>
</div>

<script>
  const { createApp } = Vue;

  const app = createApp({
    data() {
      return {
        tenants: [],
        selectedTenantID: null,
        page: @Model.Page,
        pageSize: @Model.PageSize,
        nextPage: null,
      };
    },
    methods: {
      async fetchTenants() {
        const response
          = await fetch(`/api/DeploymentAndProvisioning/Tenants?page=${this.page}&pageSize=${this.pageSize}`);
        const data = await response.json();
        this.tenants = data.tenants;
        this.nextPage = data.nextPage;
      },
    },
    mounted() {
      fetchTenants();
    }
  });

  app.mount("#app");
</script>