@model Accounting.Models.PaginatedViewModel

@{
  ViewData["Title"] = "Tenants - " + ConfigurationSingleton.Instance.ApplicationName;
}

@{
  string headerText = "Tenants";
}
<partial name="_H1HeaderPartial" model="@headerText" />

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

<div class="display-flex margin-bottom-5px background-color-antiquewhite">
  <div>
    <a asp-action="ProvisionTenant" asp-controller="Tenant" class="font-Roboto font-size-20px text-decoration-none color-darkslategray">Provision Tenant</a>
  </div>
</div>

<template id="tenant-action-template">
  <div class="display-flex padding-top-bottom-2px">
    <div class="display-flex flex-1">
      <a href="#" @@click.prevent="toggleAction" class="margin-right-5px">{{ tenant.email }}</a>
      <span v-if="isExpanded" class="display-flex">
        <div class="display-flex flex-direction-column background-color-333333 padding-left-5px padding-right-5px">
          <div class="flex-1"></div>
          <a class="font-size-12px font-Roboto color-white text-decoration-none cursor-default">options:</a>
          <div class="flex-1"></div>
        </div>
        <div class="display-flex flex-direction-column background-color-333333 padding-right-5px padding-left-5px margin-left-2px">
          <div class="flex-1"></div>
          <a :href="'/tenant/delete/' + tenant.tenantID" class="font-size-16px font-Roboto color-white text-decoration-none">
            delete
          </a>
          <div class="flex-1"></div>
        </div>
      </span>
    </div>
  </div>
</template>

<div id="app">
  <table class="border-collapse width-100 margin-bottom-5px background-color-antiquewhite">
    <thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
      <tr>
        <th></th>
        <th class="text-align-left">
          <input type="text" v-model="urlFilter" @@input="filterURL" placeholder="URL" class="font-size-16px width-100" />
        </th>
        <th class="text-align-left">
          <input type="text" v-model="emailFilter" @@input="filterEmail" placeholder="Email" class="font-size-16px width-100" />
        </th>
        <th class="text-align-left"></th>
        <th class="text-align-left"></th>
        <th class="text-align-left"></th>
        <th class="text-align-left"></th>
      </tr>
      <tr>
        <th class="text-align-left width-1px padding-right-20px">#</th>
        <th class="text-align-left width-1px padding-right-20px white-space-nowrap">URL</th>
        <th class="text-align-left padding-right-20px">Email</th>
        <th class="text-align-left width-1px padding-right-20px white-space-nowrap">Droplet ID</th>
        <th class="text-align-left width-1px padding-right-20px">IP</th>
        <th class="text-align-left width-1px padding-right-20px">Public</th>
        <th class="text-align-left width-1px white-space-nowrap">Private</th>
      </tr>
    </thead>
    <tbody class="font-Roboto-Mono">
      <template v-for="tenant in tenants" :key="tenant.tenantID">
        <tr>
          <td class="padding-right-20px">{{ tenant.tenantID }}</td>
          <td class="padding-right-20px">{{ tenant.fullyQualifiedDomainName }}</td>
          <td class="padding-right-20px">
            <tenant-action :tenant="tenant" :is-expanded="tenant.tenantID === expandedTenantId" @@expand="handleTenantExpand(tenant.tenantID)"></tenant-action>
          </td>
          <td class="padding-right-20px">{{ tenant.dropletId }}</td>
          <td class="padding-right-20px">{{ tenant.ipv4 }}</td>
          <td class="padding-right-20px">{{ tenant.sshPublic ? 'yes' : 'no' }}</td>
          <td class="white-space-nowrap">{{ tenant.sshPrivate ? 'yes' : 'no' }}</td>
        </tr>
      </template>
    </tbody>
  </table>
</div>

<script>
  const { createApp } = Vue;

  const TenantAction = {
    name: 'TenantAction',
    props: ['tenant', 'isExpanded'],
    template: '#tenant-action-template',
    methods: {
      toggleAction() {
        this.$emit('expand');
      }
    }
  };

  const app = createApp({
    components: {
      'tenant-action': TenantAction,
    },
    data() {
      return {
        tenants: [],
        expandedTenantId: null,
        emailFilter: '',
        page: @Model.Page,
        pageSize: @Model.PageSize,
        nextPage: null,
      };
    },
    methods: {
      fetchTenants() {
        fetch(`/api/tenant/get-all-tenants?page=${this.page}&pageSize=${this.pageSize}`)
          .then(response => response.json())
          .then(data => {
            this.tenants = data.tenants;
            this.nextPage = data.nextPage;
          })
          .catch(error => {
            console.error('Error fetching tenants:', error);
          });
      },
      filterUrl() {
      },
      filterEmail() {
      },
      handleTenantExpand(id) {
        this.expandedTenantId = this.expandedTenantId === id ? null : id;
      }
    },
    mounted() {
      this.fetchTenants();
    }
  });

  app.mount("#app");
</script>