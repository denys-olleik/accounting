@model Accounting.Models.AccountsReceivableViewModels.ReceivePaymentForInvoiceIdsViewModel

@{
	ViewData["Title"] = "Receive payment - " + ConfigurationSingleton.Instance.ApplicationName;
}

@{
	string headerText = "Receive payment";
}
<partial name="_H1HeaderPartial" model="@headerText" />

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

<div class="display-flex margin-bottom-5px background-color-antiquewhite">
	<div>
		<a asp-action="Index" asp-controller="Home" class="margin-right-5px">Home</a>
	</div>
</div>

<template id="select-account-template">
	<input ref="inputElement" type="text" class="font-size-20px font-Roboto-Mono" @@keydown="handleKeyDown" @@focus="handleFocus" @@blur="handleBlur" v-model="inputText" />
	<div class="display-flex flex-direction-column background-color-black">
		<div v-if="selectedAccount && !dropdownVisible" class="display-flex font-size-16px margin-5px font-Roboto-Mono">
			<div>
				<span class="margin-right-10px color-lawngreen">█</span>
			</div>
			<div class="color-white">
				{{ selectedAccount.name }}
			</div>
		</div>
	</div>
	<span>
		<input asp-for="Remember" type="checkbox" class="margin-bottom-5px" />
		<label asp-for="Remember">Remember</label>
	</span>
	<div v-if="dropdownVisible" class="display-flex flex-direction-column background-color-black font-Roboto-Mono padding-5px">
		<div v-for="(account, index) in filteredAccounts" :key="account.accountID" @@click="handleAccountSelected(account)" class="display-flex font-size-16px color-white">
			<div>
				<span :class="['margin-right-10px', account.accountID === selectedAccount?.accountID ? 'color-lawngreen' : '', index === preselectedIndex ? 'blinking-cursor' : '']">█</span>
			</div>
			<div>
				{{ account.name }}
			</div>
		</div>
	</div>
</template>

<form id="app" asp-action="ReceivePaymentForInvoiceIds" asp-controller="AccountsReceivable" method="post" class="display-flex flex-direction-column margin-bottom-5px">

	<input type="hidden" name="SelectedDebitAccountId" v-model="selectedDebitAccountID">

	<div class="display-flex margin-bottom-5px">
		<div class="flex-1 display-flex flex-direction-column background-color-antiquewhite">
			<label for="ReferenceNumber" class="font-size-16px">Reference number (required)</label>
			<input type="text" name="ReferenceNumber" class="font-size-20px" value="@Model.ReferenceNumber" autocomplete="off" autofocus />
		</div>
		<div class="width-5px"></div>
		<div class="flex-1 display-flex flex-direction-column background-color-antiquewhite">
			<label for="SelectedDebitAccountId" class="font-size-16px">Account</label>
			<select-debit-account :accounts="debitAccounts" :selected-account="selectedDebitAccount" @@account-selected="accountSelected">
			</select-debit-account>
		</div>
	</div>

	<table class="border-collapse width-100 margin-bottom-5px background-color-antiquewhite">
		<thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
			<tr>
				<th></th>
				<th class="text-align-left width-1px padding-right-20px fitwidth">Invoice</th>
				<th class="text-align-left padding-right-20px">Customer</th>
				<th class="text-align-right width-1px padding-right-20px">Total</th>
				<th class="text-align-right width-1px padding-right-20px">Received</th>
				<th class="text-align-right white-space-nowrap width-1px">Amount to receive</th>
			</tr>
		</thead>
		<tbody>
			@for (int i = 0; i < Model.Invoices.Count; i++)
			{
				<tr class="background-color-lightcoral">
					<td class="font-Roboto-Mono">@(i + 1)</td>
					<td class="font-Roboto-Mono">@Model.Invoices[i].InvoiceNumber</td>
					<td class="font-Roboto-Mono">
						@(Model.Invoices[i].BusinessEntity?.CustomerType == "individual" ? (Model.Invoices[i].BusinessEntity?.FirstName + " " + Model.Invoices[i].BusinessEntity?.LastName + (Model.Invoices[i].BusinessEntity?.CompanyName != null ? " (" + Model.Invoices[i].BusinessEntity?.CompanyName + ")" : ""))
											: (Model.Invoices[i].BusinessEntity?.CompanyName + (Model.Invoices[i].BusinessEntity?.FirstName != null || Model.Invoices[i].BusinessEntity?.LastName != null ? " (" + Model.Invoices[i].BusinessEntity?.FirstName + " " + Model.Invoices[i].BusinessEntity?.LastName + ")"
											: "")))
					</td>
					<td class="text-align-right padding-right-20px font-Roboto-Mono">
						@Model.Invoices[i].Total!.Value.ToString("F2")</td>
					<td class="text-align-right padding-right-20px font-Roboto-Mono">
						@Model.Invoices[i].Received?.ToString("F2")</td>
					<td class="text-align-right">
						<input type="hidden" name="Invoices[@i].InvoiceId" value="@Model.Invoices[i].InvoiceId" />
						<input type="number" name="Invoices[@i].AmountToReceive" value="@Model.Invoices[i].AmountToReceive" placeholder="0.00" class="font-size-16px text-align-right width-100 font-Roboto-Mono" step="0.01" min="0" disabled />
					</td>
				</tr>
				@if (Model.Invoices[i].InvoiceLines != null)
				{
					<tr>
						<td></td>
						<td colspan="5" class="">
							<table class="border-collapse width-100">
								<thead>
									<tr class="background-color-lightgreen">
										<th class="text-align-left padding-right-20px">Title</th>
										<th class="text-align-right width-1px padding-right-20px">Quantity</th>
										<th class="text-align-right width-1px padding-right-20px">Price</th>
										<th class="text-align-right width-1px white-space-nowrap">Itemized amount to receive
										</th>
									</tr>
								</thead>
								<tbody>
									@for (int j = 0; j < Model.Invoices[i].InvoiceLines.Count; j++)
									{
										<tr class="border-bottom-1px-solid-lightgray background-color-lightgreen">
											<td class="padding-right-20px font-Roboto-Mono">@Model.Invoices[i].InvoiceLines[j].Title
											</td>
											<td class="text-align-right padding-right-20px font-Roboto-Mono">
												@Model.Invoices[i].InvoiceLines[j].Quantity?.ToString("F2")</td>
											<td class="text-align-right padding-right-20px font-Roboto-Mono">
												@Model.Invoices[i].InvoiceLines[j].Price?.ToString("F2")</td>
											<td class="text-align-right white-space-nowrap">
												<input type="hidden" name="Invoices[@i].InvoiceLines[@j].InvoiceLineId" value="@Model.Invoices[i].InvoiceLines[j].InvoiceLineID" />
												<input type="hidden" name="Invoices[@i].InvoiceLines[@j].AssetsAccountId" value="@Model.Invoices[i].InvoiceLines[j].AssetsAccountId" />
												<input type="number" name="Invoices[@i].InvoiceLines[@j].AmountToReceive" value="@Model.Invoices[i].InvoiceLines[j].AmountToReceive" placeholder="0.00" class="font-size-16px text-align-right width-100 font-Roboto-Mono" step="0.01" min="0">
											</td>
										</tr>
									}
								</tbody>
							</table>
						</td>
					</tr>
				}
			}
		</tbody>
	</table>

	<div class="display-flex margin-bottom-5px">
		<div class="flex-1"></div>
		<div class="width-5px"></div>
		<div class="display-flex flex-1 flex-direction-column">
			<label for="Payment Total" class="font-size-16px font-Roboto background-color-antiquewhite">Payment
				total</label>
			<input type="number" step="0.01" name="PaymentTotal" placeholder="Payment total" class="font-size-20px font-Roboto-Mono" value="@Model.PaymentTotal" />
		</div>
	</div>

	<button type="submit" class="full-width-regular-button width-100">Receive payment</button>
</form>

@if (Model != null && Model.ValidationResult != null)
{
	foreach (var error in Model.ValidationResult.Errors)
	{
		<div>
			<small class="color-red">@error.ErrorMessage</small>
		</div>
	}
	<div class="margin-bottom-5px">
	</div>
}

@if (Context.RequestServices.GetService<IWebHostEnvironment>()!.IsDevelopment())
{

}

<script>
	const { createApp } = Vue;

	const SelectAccountDropdown = {
		name: 'SelectAccountDropdown',
		template: '#select-account-template',
		props: ['accounts', 'selectedAccount'],
		emits: ['account-selected'],
		data() {
			return {
				inputText: '',
				preselectedIndex: 0,
				dropdownVisible: false
			};
		},
		computed: {
			filteredAccounts() {
				if (!this.inputText) {
					return this.accounts;
				}
				return this.accounts.filter(account =>
					account.name.toLowerCase().includes(this.inputText.toLowerCase())
				);
			}
		},
		methods: {
			handleBlur() {
				setTimeout(() => {
					this.dropdownVisible = false;
				}, 200);
			},
			handleFocus() {
				this.preselectedIndex = 0;
				this.dropdownVisible = true;
			},
			handleKeyDown(event) {
				if (event.key === 'Enter') {
					event.preventDefault();
					if (this.preselectedIndex < this.filteredAccounts.length) {
						this.handleAccountSelected(this.filteredAccounts[this.preselectedIndex]);
					} else {
						let apiUrl = `/api/a/create`;

						let account = { accountName: this.inputText };

						fetch(apiUrl, {
							method: 'POST',
							headers: { 'Content-Type': 'application/json' },
							body: JSON.stringify(account)
						})
							.then(response => response.json())
							.then(data => {
								this.$emit('account-selected', data);
							})
							.catch((error) => {
								console.error('Error:', error);
							});

						this.inputText = '';
					}
				} else if (event.key === 'ArrowUp') {
					event.preventDefault();
					if (this.preselectedIndex > 0) {
						this.preselectedIndex--;
					} else {
						this.preselectedIndex = this.filteredAccounts.length - 1;
					}
					console.log('Arrow Up pressed');
				} else if (event.key === 'ArrowDown') {
					event.preventDefault();
					if (this.preselectedIndex < this.filteredAccounts.length - 1) {
						this.preselectedIndex++;
					} else {
						this.preselectedIndex = 0;
					}
					console.log('Arrow Down pressed');
				}
			},
			handleAccountSelected(account) {
				this.inputText = '';
				this.$emit('account-selected', account);
			},
		}
	}

	const app = createApp({
		components: {
			'select-debit-account': SelectAccountDropdown
		},
		data() {
			return {
				debitAccounts: @Html.Raw(Json.Serialize(Model.DebitAccounts).ToString() ?? "[]"),
				selectedDebitAccount: @Html.Raw(Json.Serialize(Model.SelectedDebitAccount).ToString() ?? "null"),
			}
		},
		computed: {
			selectedDebitAccountID() {
				return this.selectedDebitAccount?.accountID || '';
			}
		},
		methods: {
			accountSelected(selectedDebitAccount) {
				this.selectedDebitAccount = selectedDebitAccount;

				if (!this.debitAccounts.some(account => account.accountID === selectedDebitAccount.accountID)) {
					this.debitAccounts.push(selectedDebitAccount);
				}
			}
		},
	});

	app.mount('#app');
</script>