@model Accounting.Models.RegistrationViewModels.RegisterViewModel

@{
  ViewData["Title"] = "Register - " + ConfigurationSingleton.Instance.ApplicationName;
}

@{
  string headerText = "Register";
}

<partial name="_H1HeaderPartial" model="@headerText" />

<script src="~/js/vue-3-5-13.js" asp-append-version="true"></script>

<div id="app">
  <form asp-action="Register" asp-controller="Registration" method="post" class="display-flex flex-direction-column">
    <div class="display-flex flex-direction-column margin-bottom-5px background-color-antiquewhite">
      <label asp-for="Email" class="background-color-antiquewhite"></label>
      <input asp-for="Email" class="font-size-20px font-Roboto-Mono" autocomplete="off"
             tabindex="1" />
      <span>
        <input asp-for="Shared" type="checkbox" class="margin-bottom-5px" v-model="isShared" />
        <label asp-for="Shared">Shared</label>
      </span>
    </div>

    <div class="display-flex flex-direction-column margin-bottom-5px">
      <label asp-for="FullyQualifiedDomainName" class="background-color-antiquewhite">Fully qualified domain name (accounting.example.com). *</label>
      <input asp-for="FullyQualifiedDomainName" class="font-size-20px" />
      <div class="background-color-antiquewhite">
        * required if not shared
      </div>
    </div>

    <!-- BEGIN: Additional Fields for Non-Shared Accounts -->
    <div v-if="!isShared" class="display-flex flex-direction-column margin-bottom-5px">
      <label class="background-color-antiquewhite">Email Key</label>
      <input type="text"
             name="EmailKey"
             v-model="emailKey"
             :disabled="useExistingEmailKey"
             @@input="onEmailKeyInput"
             class="font-size-20px font-Roboto-Mono margin-top-5px" />
      <div class="background-color-antiquewhite padding-5px">
        <input type="checkbox" v-model="useExistingEmailKey" class="margin-right-5px" />
        <span>Use existing key</span>
      </div>
    </div>

    <div v-if="!isShared" class="display-flex flex-direction-column margin-bottom-5px">
      <label class="background-color-antiquewhite">Cloud Key</label>
      <input type="text"
             name="CloudKey"
             v-model="cloudKey"
             :disabled="useExistingCloudKey"
             @@input="onCloudKeyInput"
             class="font-size-20px font-Roboto-Mono margin-top-5px" />
      <div class="background-color-antiquewhite padding-5px">
        <input type="checkbox" v-model="useExistingCloudKey" class="margin-right-5px" />
        <span>Use existing key</span>
      </div>
    </div>
    <!-- END: Additional Fields for Non-Shared Accounts -->
    <!-- The rest of your original form remains completely unchanged -->
    <div class="display-flex">
      <div class="flex-1 display-flex flex-direction-column margin-bottom-5px">
        <label asp-for="FirstName" class="background-color-antiquewhite">First name</label>
        <input asp-for="FirstName"
               class="font-size-20px"
               maxlength="100" autocomplete="off" tabindex="2" />
      </div>
      <div class="width-5px"></div>
      <div class="flex-1 display-flex flex-direction-column margin-bottom-5px">
        <label asp-for="LastName" class="background-color-antiquewhite">Last name</label>
        <input asp-for="LastName"
               class="font-size-20px"
               maxlength="100" autocomplete="off" tabindex="3" />
      </div>
    </div>
    <div class="display-flex flex-direction-column">
      <label asp-for="Password" class="background-color-antiquewhite">Password</label>
      <input asp-for="Password" type="password" class="margin-bottom-5px font-size-20px font-Roboto-Mono" tabindex="4" />
    </div>

    <button type="submit" class="full-width-regular-button">Register</button>
  </form>

  @if (Model != null && Model.ValidationResult != null)
  {
    foreach (var error in Model.ValidationResult.Errors)
    {
      <div>
        <small class="color-red">@error.ErrorMessage</small>
      </div>
    }
  }
</div>

<script>
  const { createApp } = Vue;

  const app = createApp({
    data() {
      return {
        isShared: @Model.Shared.ToString().ToLower(),
        useExistingEmailKey: false,
        useExistingCloudKey: false,
        emailKey: '',
        cloudKey: ''
      };
    },
    methods: {
      onEmailKeyInput() {
        if (this.useExistingEmailKey) {
          this.emailKey = '';
        }
      },
      onCloudKeyInput() {
        if (this.useExistingCloudKey) {
          this.cloudKey = '';
        }
      }
    },
    watch: {
      useExistingEmailKey(newVal) {
        if (newVal) {
          this.emailKey = '';
        }
      },
      useExistingCloudKey(newVal) {
        if (newVal) {
          this.cloudKey = '';
        }
      }
    }
  });

  app.mount('#app');
</script>