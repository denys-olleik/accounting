@model Accounting.Models.SecretViewModels.SecretsViewModel

@{
  ViewData["Title"] = "Secrets - " + ConfigurationSingleton.Instance.ApplicationName;
}

@{
    string headerText = "Secrets";
}
<partial name="_H1HeaderPartial" model="@headerText" />

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

<template id="secret-action-template">
  <div class="display-flex padding-top-bottom-2px">
    <div class="display-flex flex-1">
      <a href="#" @@click.prevent="toggleAction" class="margin-right-5px">{{ secret.key }}</a>
      <span v-if="isExpanded" class="display-flex margin-left-2px">
        <div class="display-flex flex-direction-column background-color-333333 padding-left-5px padding-right-5px">
          <div class="flex-1"></div>
          <a class="font-size-12px font-Roboto color-white text-decoration-none cursor-default">options:</a>
          <div class="flex-1"></div>
        </div>
        <div class="display-flex flex-direction-column background-color-333333 padding-right-5px padding-left-5px margin-left-2px">
          <div class="flex-1"></div>
          <a :href="'/Secret/Update/' + secret.secretID" class="font-size-16px font-Roboto color-white text-decoration-none">update</a>
          <div class="flex-1"></div>
        </div>
        <div class="display-flex flex-direction-column background-color-333333 padding-right-5px padding-left-5px margin-left-2px">
          <div class="flex-1"></div>
          <a :href="'/secret/delete/' + secret.secretID" class="font-size-16px font-Roboto color-white text-decoration-none">delete</a>
          <div class="flex-1"></div>
        </div>
      </span>
    </div>
  </div>
</template>

<div class="display-flex margin-bottom-5px background-color-antiquewhite">
  <div>
    <a asp-action="Create" asp-controller="Secret" class="font-Roboto font-size-20px text-decoration-none color-darkslategray">Create Secret</a>
  </div>
</div>

<div id="app" class="background-color-antiquewhite">
  <table class="border-collapse width-100 margin-bottom-5px">
    <thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
      <tr>
        <th class="text-align-left width-1px padding-right-20px">#</th>
        <th class="text-align-left width-1px padding-right-20px white-space-nowrap">Key</th>
        <th class="text-align-left width-1px padding-right-20px white-space-nowrap">Master</th>
        <th class="text-align-left width-1px padding-right-20px white-space-nowrap">Vendor</th>
        <th class="text-align-left padding-right-20px">Purpose</th>
        <th class="text-align-right width-1px"></th>
      </tr>
    </thead>
    <tbody class="font-Roboto-Mono">
      <tr v-for="secret in secrets" :key="secret.secretID">
        <td class="padding-right-20px">{{ secret.secretID }}</td>
        <td class="padding-right-20px white-space-nowrap">
          <secret-action :secret='secret' :is-expanded="secret.secretID === expandedSecretId" @@expand="handleSecretExpand(secret.secretID)"></secret-action>
        </td>
        <td class="padding-right-20px white-space-nowrap">{{ secret.master ? 'Yes' : 'No' }}</td>
        <td class="padding-right-20px white-space-nowrap">{{ secret.vendor }}</td>
        <td class="padding-right-20px">{{ secret.purpose }}</td>
        <td class="text-align-right white-space-nowrap"></td>
      </tr>
    </tbody>
  </table>
</div>

<div class="background-color-antiquewhite">
  <p>The system expects the following keys and their purpose...</p>
  <ul>
    <li>key: "email", purpose: "email recovery,registration emails, advertising emails, etc"</li>
    <li>key: "sms", purpose: "login codes, notifications, etc"</li>
    <li>key: "cloud", purpose: "provisioning, etc"</li>
  </ul>
</div>

<script>
  const { createApp } = Vue;

  const SecretAction = {
    name: 'SecretAction',
    props: ['secret', 'isExpanded'],
    template: '#secret-action-template',
    methods: {
      toggleAction() {
        this.$emit('expand');
      }
    }
  };

  const app = createApp({
    components: {
      'secret-action': SecretAction,
    },
    data() {
      return {
        secrets: @Html.Raw(Json.Serialize(Model.Secrets)),
        expandedSecretId: null,
      };
    },
    methods: {
      handleSecretExpand(id) {
        this.expandedSecretId = this.expandedSecretId === id ? null : id;
      }
    }
  });

  app.mount('#app');
</script>