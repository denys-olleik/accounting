@model Accounting.Models.BusinessEntityViewModels.EditBusinessEntityViewModel

@{
	ViewData["Title"] = "Update customer and or vendor - " + ConfigurationSingleton.Instance.ApplicationName;
}

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

@{
	string headerText = "Update customer and or vendor";
}
<partial name="_H1HeaderPartial" model="@headerText" />

<template id="customer-type-template">
	<a href="" @@click.prevent="selectCustomerType"
		 :class="{ 'background-color-dodgerblue': isSelected, 'color-white': isSelected }"
		 class="text-decoration-none border-1px-solid-dodgerblue padding-2px">
		{{ customerType }}
	</a>
</template>

<template id="available-business-entity-types-and-selected-entity-types-template">
	<a href="" v-for="type in availableBusinessEntityTypesCsv.split(',')" @@click.prevent="selectType(type)"
		 :class="{ 'background-color-dodgerblue': isSelected(type), 'color-white': isSelected(type) }"
		 class="text-decoration-none border-1px-solid-dodgerblue padding-2px">
		{{ type }}
	</a>
</template>

<template id="address-line-removal-template">
	<div class="text-align-center">
		<div v-if="!isRemoveConfirmationVisible">
			<a href="#" class="color-white background-color-red width-100 display-block text-decoration-none"
				 @@click.prevent="toggleConfirmationVisibility">Remove</a>
		</div>
		<div v-else>
			<div class="background-color-red">
				<a href="#" class="text-decoration-none color-white"
					 @@click.prevent="toggleConfirmationVisibility">Cancel</a>
			</div>
			<div class="margin-bottom-5px background-color-red">
				<a href="#" class="color-white text-decoration-none" @@click.prevent="confirmRemoval">Remove</a>
			</div>
		</div>
	</div>
</template>

<template id="customer-address-template">
	<div class="display-flex flex-direction-column background-color-antiquewhite margin-bottom-5px">
		<div class="display-flex flex-1 flex-direction-column">
			<div class="display-flex flex-direction-column">
				<label>Line 1</label>
				<input type="text" class="font-size-20px width-100" v-model="address.AddressLine1" required />
			</div>
			<div class="display-flex flex-direction-column">
				<label>Line 2 (optional)</label>
				<input type="text" class="font-size-20px width-100" v-model="address.AddressLine2" />
			</div>
			<div class="display-flex max-width-768-flex-direction-column">
				<div class="display-flex">
					<div class="display-flex flex-1 flex-direction-column">
						<label>City</label>
						<input type="text" class="font-size-20px width-100" v-model="address.City" required />
					</div>
					<div class="width-5px"></div>
					<div class="display-flex flex-1 flex-direction-column">
						<label>State/Province</label>
						<input type="text" class="font-size-20px width-100" v-model="address.StateProvince" required />
					</div>
				</div>
				<div class="width-5px"></div>
				<div class="display-flex">
					<div class="display-flex flex-1 flex-direction-column">
						<label>Postal code</label>
						<input type="text" class="font-size-20px width-100" v-model="address.PostalCode" required />
					</div>
					<div class="width-5px"></div>
					<div class="display-flex flex-1 flex-direction-column">
						<label>Country</label>
						<input type="text" class="font-size-20px width-100" v-model="address.Country" required />
					</div>
				</div>
			</div>
		</div>
		<div class="display-flex">
			<div class="flex-1"></div>
			<div>
				<address-removal :address="address" @@confirm-removal="$emit('confirm-removal', address)"
												 @@cancel-removal="$emit('cancel-removal', address)">
				</address-removal>
			</div>
		</div>
	</div>
</template>

<div class="display-flex margin-bottom-5px background-color-antiquewhite">
	<div class="flex-1"></div>
	<div class="margin-left-20px flex-1 text-align-right">
		<a asp-action="Customers" asp-controller="Customer" class="font-Roboto font-size-16px color-blue">Customers</a>
		<a asp-action="Index" asp-controller="Home" class="font-Roboto font-size-16px color-blue margin-left-20px">Home</a>
	</div>
</div>

<form id="app" asp-action="Edit" asp-controller="Customer" method="post"
			class="display-flex flex-direction-column margin-bottom-5px">

	<input type="hidden" id="selectedCustomerType" v-model="selectedCustomerType" name="SelectedCustomerType" />

	<div class="margin-bottom-5px background-color-antiquewhite">
		<label class="font-Roboto font-size-16px">Customer type</label>
		<div class="display-flex flex-direction-column margin-top-5px">
			<div v-for="customerType in customerTypes" :key="customerType" class="margin-bottom-5px">
				<input type="radio" :id="'customerType_' + customerType" :value="customerType"
							 v-model="selectedCustomerType" class="margin-right-5px" />
				<label :for="'customerType_' + customerType" class="font-Roboto font-size-16px">{{ customerType }}</label>
			</div>
		</div>
	</div>

	<div class="margin-bottom-5px background-color-antiquewhite">
		<label class="font-Roboto font-size-16px">Business entity type</label>
		<div class="display-flex flex-direction-column margin-top-5px">
			<div v-for="type in availableBusinessEntityTypesCsv.split(',')" :key="type" class="margin-bottom-5px">
				<input type="checkbox" :id="'entityType_' + type" :value="type"
							 :checked="selectedBusinessEntityTypesCsv.includes(type)" @@change="typeSelected(type)"
							 class="margin-right-5px" />
				<label :for="'entityType_' + type" class="font-Roboto font-size-16px">{{ type }}</label>
			</div>
		</div>
	</div>

	<div class="margin-bottom-5px background-color-antiquewhite">
		<label class="font-Roboto font-size-16px">Company name</label>
		<input asp-for="CompanyName" class="font-size-20px width-100" />
	</div>

	<div class="display-flex margin-bottom-5px">
		<div class="display-flex flex-1 flex-direction-column">
			<label asp-for="FirstName" class="font-Roboto font-size-16px background-color-antiquewhite">First name</label>
			<input asp-for="FirstName" class="font-size-20px" />
		</div>
		<div class="width-5px"></div>
		<div class="display-flex flex-1 flex-direction-column">
			<label asp-for="LastName" class="font-Roboto font-size-16px background-color-antiquewhite">Last name</label>
			<input asp-for="LastName" class="font-size-20px" />
		</div>
	</div>

	<input type="hidden" name="AddressesJson" :value="JSON.stringify(addresses)" />
	<input type="hidden" name="SelectedBusinessEntityTypesCsv" :value="selectedBusinessEntityTypesCsv" />

	<div class="margin-bottom-5px">
		<div class="display-flex flex-direction-column">
			<customer-address v-for="address in addresses" :key="address.id" :address="address"
												@@confirm-removal="handleConfirmRemoval">
			</customer-address>
			<div class="background-color-antiquewhite">
				<a href="#" @@click.prevent="addAddress" class="margin-bottom-5px">Add address</a>
			</div>
		</div>
	</div>

	<div class="margin-bottom-5px background-color-antiquewhite">
		<label class="font-Roboto font-size-16px">Payment terms</label>
		<div class="display-flex flex-direction-column">
			<select asp-for="SelectedPaymentTermId"
							asp-items="@(new SelectList(Model.AvailablePaymentTerms, "ID", "DisplayText"))" class="font-size-20px">
				<option>Select payment terms</option>
			</select>
		</div>
	</div>

	<button type="submit" class="full-width-regular-button">Update customer and or vendor</button>
</form>

@if (Model != null && Model.ValidationResult != null)
{
	foreach (var error in Model.ValidationResult.Errors)
	{
		<div>
			<small class="color-red">@error.ErrorMessage</small>
		</div>
	}
	<div class="margin-bottom-5px">
	</div>
}

<script>
	const { createApp } = Vue;

	const CustomerType = {
		name: 'CustomerType',
		template: '#customer-type-template',
		props: ['customerType', 'selectedCustomerType'],
		emits: ['select-customer-type'],
		computed: {
			isSelected() {
				return this.customerType === this.selectedCustomerType;
			}
		},
		methods: {
			selectCustomerType() {
				this.$emit('select-customer-type', this.customerType);
			}
		}
	}

	const AddressRemoval = {
		name: 'AddressRemoval',
		template: '#address-line-removal-template',
		props: ['address'],
		data() {
			return {
				isRemoveConfirmationVisible: false
			}
		},
		methods: {
			toggleConfirmationVisibility() {
				this.isRemoveConfirmationVisible = !this.isRemoveConfirmationVisible;
			},
			confirmRemoval() {
				this.$emit('confirm-removal', this.address);
			},
		},
	}

	const CustomerAddress = {
		name: 'CustomerAddress',
		template: '#customer-address-template',
		components: {
			'address-removal': AddressRemoval
		},
		props: ['address'],
		methods: {
			confirmRemoval() {
				this.$emit('remove-address', this.address);
			}
		}
	}

	const AvailableBusinessEntityTypesAndSelectedEntityType = {
		name: 'AvailableBusinessEntityTypesAndSelectedEntityType',
		template: '#available-business-entity-types-and-selected-entity-types-template',
		props: ['availableBusinessEntityTypesCsv', 'selectedBusinessEntityTypesCsv'],
		emits: ['type-selected'],
		methods: {
			selectType(type) {
				this.$emit('type-selected', type);
			},
			isSelected(type) {
				return this.selectedBusinessEntityTypesCsv.includes(type);
			}
		}
	};

	const app = createApp({
		components: {
			'customer-type': CustomerType,
			'customer-address': CustomerAddress,
			'address-removal': AddressRemoval,
			'available-business-entity-types-and-selected-entity-types': AvailableBusinessEntityTypesAndSelectedEntityType,
		},
		data() {
			return {
				customerTypes: @Html.Raw(Json.Serialize(Model.CustomerTypes)),
				selectedCustomerType: '@(Model.SelectedCustomerType != null ? Model.SelectedCustomerType : "")',
				addresses: @Html.Raw(Model.AddressesJson ?? "[]"),
				availableBusinessEntityTypesCsv: '@Model.AvailableBusinessEntityTypesCsv',
				selectedBusinessEntityTypesCsv: '@Model.SelectedBusinessEntityTypesCsv',
			};
		},
		methods: {
			typeSelected(selectedType) {
				let selectedTypesArray = this.selectedBusinessEntityTypesCsv.split(',').filter(type => type);
				const index = selectedTypesArray.indexOf(selectedType);
				if (index !== -1) {
					selectedTypesArray.splice(index, 1);
				} else {
					selectedTypesArray.push(selectedType);
				}

				this.selectedBusinessEntityTypesCsv = selectedTypesArray.join(',');
			},
			selectType(customerType) {
				console.log(customerType);
				this.selectedCustomerType = customerType;
			},
			addAddress() {
				this.addresses.push({
					id: Date.now().toString(),
					addressLine1: '',
					addressLine2: '',
					city: '',
					stateProvince: '',
					postalCode: '',
					country: ''
				});
			},
			removeAddress(address) {
				const index = this.addresses.indexOf(address);
				if (index !== -1) {
					this.addresses.splice(index, 1);
				}
			},
			handleConfirmRemoval(address) {
				this.removeAddress(address);
			},
		}
	});

	app.mount('#app');
</script>