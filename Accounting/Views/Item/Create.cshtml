@using Accounting.Business
@model Accounting.Models.ItemViewModels.CreateItemViewModel

@{
  ViewData["Title"] = "Create Product or Service - " + ConfigurationSingleton.Instance.ApplicationName;
}

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

@{
  string headerText = "Create Product or Service";
}
<partial name="_H1HeaderPartial" model="@headerText" />

<template id="item-type-selector-template">
  <select v-model="selectedItemType" name="SelectedItemType" class="font-size-20px width-100">
    <option value="">Select Item Type</option>
    <option v-for="itemType in itemTypes" :value="itemType">{{ itemType }}</option>
  </select>
</template>

<template id="account-template">
  <a href="#" @@click.prevent="selectAccount(account.accountID)"
     :class="{
       'background-color-blue color-white':
         account.accountID === $parent.selectedRevenueAccountId || account.accountID === $parent.selectedAssetsAccountId
     }">
    <div>{{ account.name }}</div>
  </a>
</template>

<form id="app" asp-action="Create" asp-controller="Item" method="post" class="display-flex flex-direction-column margin-bottom-5px">
  <input type="hidden" asp-for="ParentItemId" />
  <input type="hidden" name="SelectedRevenueAccountId" v-model="selectedRevenueAccountId" />
  <input type="hidden" name="SelectedAssetsAccountId" v-model="selectedAssetsAccountId" />

  @if (Model.ParentItemId != null)
  {
    <div class="display-flex margin-bottom-5px background-color-antiquewhite">
      <div>Parent Item:</div>
      <div class="display-flex flex-direction-column">
        <a asp-action="Update"
           asp-controller="Item"
           asp-route-accountId="@Model.ParentItemId"
           class="font-Roboto-Mono margin-left-5px">@Model.ParentItem.Name</a>
      </div>
    </div>
  }

  <div class="display-flex flex-direction-column margin-bottom-5px">

    <label asp-for="Name" class="background-color-antiquewhite"></label>
    <input asp-for="Name"
           class="font-size-20px"
           maxlength="100" />
  </div>
  <div class="display-flex flex-direction-column margin-bottom-5px">
    <label asp-for="Description" class="background-color-antiquewhite"></label>
    <textarea asp-for="Description" class="font-size-20px" rows="6"></textarea>
  </div>

  <div class="display-flex flex-direction-column margin-bottom-5px">
    <label asp-for="Quantity" class="background-color-antiquewhite">Invoice Quantity</label>
    <input asp-for="Quantity" type="number" step="0.01" class="font-size-20px" />
  </div>

  <div class="display-flex flex-direction-column margin-bottom-5px">
    <label class="background-color-antiquewhite">Item Type</label>
    <item-type-selector :item-types="itemTypes"></item-type-selector>
  </div>


  <div class="display-flex flex-direction-column margin-bottom-5px">
    <label class="background-color-antiquewhite">Inventory Method</label>
    <select asp-for="SelectedInventoryMethod" class="font-size-20px width-100">
      @foreach (var method in Model.AvailableInventoryMethods)
      {
        if ((Model.SelectedInventoryMethod == method) || (Model.SelectedInventoryMethod == null && method == Item.InventoryMethods.Any))
        {
          <option value="@method" selected>@method</option>
        }
        else
        {
          <option value="@method">@method</option>
        }
      }
    </select>
  </div>

  <div class="display-flex flex-direction-column background-color-antiquewhite margin-bottom-5px">
    <label class="background-color-antiquewhite text-align-center font-size-20px">Inventory</label>
    <div class="margin-10px">
      <div class="display-flex flex-direction-column margin-bottom-5px">
        <label for="LocationId" class="background-color-antiquewhite">Location</label>
        <select asp-for="SelectedLocationId" v-model="selectedLocationId" class="font-size-20px width-100">
          <option value="">Select Location</option>
          @foreach (var location in Model.Locations)
          {
            <option value="@location.LocationID">@location.Name</option>
          }
        </select>
      </div>
      <div class="display-flex flex-direction-column">
        <div class="display-flex margin-bottom-5px">
          <div class="display-flex flex-1 flex-direction-column">
            <label for="InventoryQuantity" class="background-color-antiquewhite">Inventory Quantity</label>
            <input asp-for="InventoryQuantity" type="number" class="width-100 font-size-20px" v-model="inventoryQuantity" />
          </div>
          <div class="width-5px"></div>
          <div class="display-flex">
            <div>
              <div class="display-flex flex-1 flex-direction-column">
                <label for="PurchasedFor" class="background-color-antiquewhite">Purchased For</label>
                <input asp-for="PurchasedFor" type="number" step="0.01" class="width-100 font-size-20px" v-model="purchasedFor" />
              </div>
            </div>
            <div class="width-5px"></div>
            <div class="display-flex flex-1 flex-direction-column">
              <label for="SellFor" class="background-color-antiquewhite">Sell For</label>
              <input asp-for="SellFor" type="number" step="0.01" class="width-100 font-size-20px" v-model="sellFor" />
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="margin-bottom-5px background-color-antiquewhite">
    <label>Revenue account to increase (credit)</label>
    <div class="display-flex flex-direction-column">
      <account v-for="account in accounts.filter(account => account.type === '@Accounting.Business.Account.AccountTypeConstants.Revenue')"
                        :key="account.accountID"
                        :account="account"
                        @@select-account="updateSelectedAccountId">
      </account>
    </div>
  </div>

  <div class="margin-bottom-5px background-color-antiquewhite">
    <label>Assets accounts to increase (debit)</label>
    <div class="display-flex flex-direction-column">
      <account v-for="account in accounts.filter(account => account.type === '@Accounting.Business.Account.AccountTypeConstants.Assets')"
                        :key="account.accountID"
                        :account="account"
                        @@select-account="updateSelectedAccountId">
      </account>
    </div>
  </div>

  <button type="submit" class="full-width-regular-button">Create Product or Service</button>
</form>

@if (Model != null && Model.ValidationResult != null)
{
  foreach (var error in Model.ValidationResult.Errors)
  {
    <div>
      <small class="color-red">@error.ErrorMessage</small>
    </div>
  }
  <div class="margin-bottom-5px">
  </div>
}

<script>
  const { createApp } = Vue;

  const Account = {
    name: 'Account',
    template: '#account-template',
    props: ['account'],
    methods: {
      selectAccount(accountID) {
        this.$emit('select-account', accountID);
      }
    }
  };

  const ItemTypeSelector = {
    name: 'ItemTypeSelector',
    template: '#item-type-selector-template',
    props: ['itemTypes'],
    data() {
      return {
        selectedItemType: '@Model.SelectedItemType' || '',
      };
    },
  };

  const app = createApp({
    components: {
      'account': Account,
      'item-type-selector': ItemTypeSelector,
    },
    data() {
      return {
        accounts: @Html.Raw(Json.Serialize(Model!.Accounts)),
        selectedRevenueAccountId: @Html.Raw(Model.SelectedRevenueAccountId.HasValue ? Model.SelectedRevenueAccountId.Value.ToString() : "null"),
        selectedAssetsAccountId: @Html.Raw(Model.SelectedAssetsAccountId.HasValue ? Model.SelectedAssetsAccountId.Value.ToString() : "null"),
        itemTypes: @Html.Raw(Json.Serialize(Model.AvailableItemTypes)),
        selectedItemType: '@Model.SelectedItemType' || '',
        selectedLocationId: '@Model.SelectedLocationId?.ToString()' || '',
        inventoryQuantity: 0,
        sellFor: 0.0,
        purchasedFor: 0.0,
        parentItemId: @Html.Raw(Model.ParentItemId.HasValue ? Model.ParentItemId.Value.ToString() : "null"),
      }
    },
    watch: {
      selectedLocationId(newVal) {
        if (newVal === '') {
          this.inventoryQuantity = 0;
          this.sellfor = 0.0;
        }
      }
    },
    methods: {
      updateSelectedAccountId(accountId) {
        const account = this.accounts.find(a => a.accountID === accountId);

        if (account.type === '@Accounting.Business.Account.AccountTypeConstants.Revenue') {
          this.selectedRevenueAccountId = accountId;
        } else if (account.type === '@Accounting.Business.Account.AccountTypeConstants.Assets') {
          this.selectedAssetsAccountId = accountId;
        }
      }
    },
  });

  app.mount('#app');
</script>

@if (Context.RequestServices.GetService<IWebHostEnvironment>()!.IsDevelopment())
{
  
}