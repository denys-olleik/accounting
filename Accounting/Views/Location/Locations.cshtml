@model Accounting.Models.LocationViewModels.LocationsPaginatedViewModel

@{
  ViewData["Title"] = "Locations - " + ConfigurationSingleton.Instance.ApplicationName;
}

@{
  string headerText = "Locations";
}
<partial name="_H1HeaderPartial" model="@headerText" />

<script src="~/js/vue-3-5-13.js" asp-append-version="true"></script>

<template id="location-template">
  <div class="background-color-antiquewhite">
    <div class="display-flex border-bottom-1px-solid-lightgray padding-top-bottom-2px">
      <div class="display-flex flex-direction-column flex-1 margin-right-2px margin-left-2px">
        <div>
          <span v-if="location.children && location.children.length && location.childrenExpanded" class="margin-right-5px">➖</span>
          <a href="#" @@click.prevent="handleLocationClick(location.locationID)">
            {{ location.name }}
          </a>
          <span v-if="location.children && location.children.length && !location.childrenExpanded" class="margin-left-5px">➕</span>
        </div>
        <div v-if="location.optionsExpanded" class="display-flex flex-direction-column flex-1">
          <div class="display-flex margin-bottom-2px">
            <div class="display-flex flex-direction-column background-color-333333 padding-left-5px padding-right-5px">
              <div class="flex-1"></div>
              <a class="font-size-12px font-Roboto color-white text-decoration-none cursor-default">options:</a>
              <div class="flex-1"></div>
            </div>
            <div class="display-flex flex-direction-column background-color-333333 padding-right-5px padding-left-5px margin-left-2px">
              <div class="flex-1"></div>
              <a class="font-size-16px font-Roboto color-white text-decoration-none" :href="`/l/update/${location.locationID}`">update</a>
              <div class="flex-1"></div>
            </div>
            <div class="display-flex flex-direction-column background-color-333333 padding-right-5px padding-left-5px margin-left-2px">
              <div class="flex-1"></div>
              <a class="font-size-16px font-Roboto color-white text-decoration-none" :href="`/l/create/${location.locationID}`">add</a>
              <div class="flex-1"></div>
            </div>
            <div class="display-flex flex-direction-column background-color-333333 padding-right-5px padding-left-5px margin-left-2px">
              <div class="flex-1"></div>
              <a class="font-size-16px font-Roboto color-white text-decoration-none" :href="`/l/delete/${location.locationID}`">delete</a>
              <div class="flex-1"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div v-if="location.childrenExpanded && location.children && location.children.length" class="margin-left-25px">
      <template v-for="childLocation in location.children" :key="childLocation.locationID">
        <location :location="childLocation" @@location-clicked="handleLocationClick"></location>
      </template>
    </div>
  </div>
</template>

<div class="display-flex margin-bottom-5px background-color-antiquewhite">
  <div class="margin-left-20px">
    <a asp-action="Create" asp-controller="Location" class="font-Roboto font-size-16px color-blue">Create Location</a>
  </div>
  <div class="flex-1 text-align-right">
    <a asp-action="Index" asp-controller="Home" class="font-Roboto font-size-16px color-blue margin-left-20px">Home</a>
  </div>
</div>

<div id="app" class="display-flex flex-direction-column">
  <div class="margin-bottom-5px">
    <template v-for="location in locations" :key="location.locationID">
      <location :location="location" @@location-clicked="onLocationClicked"></location>
    </template>
  </div>

  <div class="margin-bottom-5px display-flex font-size-16px background-color-antiquewhite">
    <div class="flex-1 text-align-left">
      <a :href="`/l/locations?page=${page - 1}&pageSize=${pageSize}`" v-if="page > 1" class="color-blue">prev</a>
    </div>
    <div class="display-flex flex-1">
    </div>
    <div class="flex-1 text-align-right">
      <a :href="`/l/locations?page=${nextPage}&pageSize=${pageSize}`" v-if="nextPage" class="color-blue">next</a>
    </div>
  </div>
</div>

<script>
  const { createApp } = Vue;

  const Location = {
    name: 'location',
    template: '#location-template',
    props: ['location'],
    methods: {
      handleLocationClick(locationID) {
        console.log(locationID);
        this.$emit('location-clicked', locationID);
      },
    }
  };

  const app = createApp({
    components: {
      'location': Location
    },
    data() {
      return {
        locations: [],
        expandedLocationID: null,
        page: @Model.Page,
        pageSize: @Model.PageSize,
        nextPage: null,
        rememberPageSize: @(Model.RememberPageSize ? "true" : "false")
          }
    },
    methods: {
      updateLocationExpansion(location, selectedID, path = []) {
        const isSelected = location.locationID === selectedID;
        const isPathNode = path.includes(location.locationID);
        const children = location.children ? location.children.map(child =>
          this.updateLocationExpansion(child, selectedID, isSelected ? [location.locationID, ...path] : path)
        ) : [];

        return {
          ...location,
          children,
          childrenExpanded: isSelected || isPathNode || children.some(child => child.childrenExpanded),
          optionsExpanded: isSelected
        };
      },
      fetchLocations() {
        const storedPageSize = parseInt(localStorage.getItem('pageSize'));
        if (storedPageSize) {
          this.pageSize = storedPageSize;
        }

        fetch(`/api/l/locations?page=${this.page}&pageSize=${this.pageSize}&includeDescendants=true`)
          .then(response => response.json())
          .then(data => {
            this.locations = data.locations;
            if (data.currentPage > 0) {
              this.page = data.currentPage;
            }
            if (data.nextPage > 0) {
              this.nextPage = data.nextPage;
            }
          });
      },
      onLocationClicked(locationID) {
        this.expandedLocationID = this.expandedLocationID === locationID ? null : locationID;
        this.locations = this.locations.map(location => this.updateLocationExpansion(location, this.expandedLocationID));
      },
    },
    mounted() {
      if (this.rememberPageSize) {
        localStorage.setItem('pageSize', this.pageSize);
      }
      this.fetchLocations();
    }
  });

  app.mount('#app');
</script>