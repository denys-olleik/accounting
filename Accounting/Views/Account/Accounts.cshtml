@{
  ViewData["Title"] = "Accounts - " + ConfigurationSingleton.Instance.ApplicationName;
}

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

@{
  string headerText = "Accounts";
}
<partial name="_H1HeaderPartial" model="@headerText" />

<div class="display-flex margin-bottom-5px background-color-antiquewhite">
  <div>
    <a asp-action="Create" asp-controller="Account" class="font-Roboto font-size-20px text-decoration-none color-darkslategray">Create Account</a>
  </div>
</div>

<template id="account-template">
  <div>
    <div class="display-flex border-bottom-1px-solid-lightgray padding-top-bottom-2px">
      <div class="display-flex flex-1">
        <a href="#" @@click.prevent="handleAccountClick(account.accountID)">
          {{ account.name }}
        </a>
        <span>&nbsp;</span>
        <div v-if="account.selectedAccountID === account.accountID" class="display-flex flex-direction-column">
          <div class="display-flex margin-bottom-2px">
            <div class="display-flex flex-direction-column background-color-333333 padding-left-5px padding-right-5px">
              <div class="flex-1"></div>
              <a class="font-size-12px font-Roboto  color-white text-decoration-none cursor-default">options:</a>
              <div class="flex-1"></div>
            </div>
            <div class="display-flex
              flex-direction-column
              background-color-333333
              padding-right-5px
              padding-left-5px
              margin-left-2px">
              <div class="flex-1"></div>
              <a class="font-size-16px font-Roboto color-white text-decoration-none"
                 :href="`/a/update/${account.accountID}`">Update</a>
              <div class="flex-1"></div>
            </div>
            <div class="display-flex
              flex-direction-column
              background-color-333333
              padding-right-5px
              padding-left-5px
              margin-left-2px">
              <div class="flex-1"></div>
              <a class="font-size-16px font-Roboto color-white text-decoration-none"
                 :href="`/a/create/${account.accountID}`">Add</a>
              <div class="flex-1"></div>
            </div>
          </div>
          <div class="display-flex">
            <div class="display-flex flex-direction-column background-color-darkcyan padding-left-5px padding-right-5px">
              <div class="flex-1"></div>
              <a class="font-size-12px font-Roboto  color-white text-decoration-none cursor-default">information:</a>
              <div class="flex-1"></div>
            </div>
            <div class="display-flex
              flex-direction-column
              background-color-darkcyan
              padding-right-5px
              padding-left-5px
              border-radius-5px
              margin-left-2px">
              <div class="flex-1"></div>
              <a class="font-size-16px font-Roboto color-white text-decoration-none">
                {{ account.journalEntryCount }} Journal entries
              </a>
              <div class="flex-1"></div>
            </div>
          </div>
        </div>
      </div>
      <div>{{ account.type }}</div>
    </div>
    <div v-if="account.children && account.children.length" class="margin-left-25px">
      <template v-for="childAccount in account.children" :key="childAccount.accountID">
        <account :account="childAccount" @@account-clicked="handleAccountClick"></account>
      </template>
    </div>
  </div>
</template>

<div id="app" class="display-flex flex-direction-column font-Roboto-Mono background-color-antiquewhite">
  <template v-for="account in accounts" :key="account.accountID">
    <account :account="account" @@account-clicked="onAccountClicked"></account>
  </template>
</div>

<script>
  const { createApp } = Vue;

  const Account = {
    name: 'account',
    template: '#account-template',
    props: ['account'],
    methods: {
      handleAccountClick(accountID) {
        console.log(accountID);
        this.$emit('account-clicked', accountID);
      },
    }
  };

  const app = createApp({
    components: {
      'account': Account
    },
    data() {
      return {
        accounts: [],
        selectedAccountID: null
      }
    },
    methods: {
      onAccountClicked(accountID) {
        console.log('Account clicked:', accountID);

        if (this.selectedAccountID === accountID) {
          this.selectedAccountID = null;
        } else {
          this.selectedAccountID = accountID;
        }

        this.accounts = this.accounts.map(account => this.resetSelectedAccountID(account, this.selectedAccountID));
      },
      addSelectedAccountID(accounts) {
        return accounts.map(account => this.resetSelectedAccountID(account));
      },
      resetSelectedAccountID(account, selectedID = null) {
        const children = account.children ? account.children.map(child => this.resetSelectedAccountID(child, selectedID)) : [];
        return { ...account, children, selectedAccountID: selectedID };
      },
    },
    mounted() {
      fetch('/api/a/all')
        .then(response => response.json())
        .then(data => {
          this.accounts = this.addSelectedAccountID(data);
        });
    },
  });

  app.mount('#app');
</script>